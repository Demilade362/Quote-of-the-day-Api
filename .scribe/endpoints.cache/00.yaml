## Autogenerated by Scribe. DO NOT MODIFY.

name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/quote
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Random Quotes'
      description: |-
        This Route Get a Random Quote from the Api and will return a status code of 200 if the quote is found

        Otherwise, the request will fail with a 404 error,and not quotes is found
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"quote":"Nam inventore est voluptates quia commodi voluptas et.","author":"Prof. Alberta Weissnat DDS"}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '56'
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields:
      Returns:
        name: Returns
        description: "It get's you a random quote."
        required: false
        example: null
        type: ''
        enumValues: []
        exampleWasSpecified: false
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/quotes/{quotes_id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Quotes Based On an ID'
      description: |-
        This Route Get a Quote from the Api based on the ID given and will return a status code of 200 if the quote is found

        Otherwise, the request will fail with a 404 error, because no quote with that ID is found
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      quotes_id:
        name: quotes_id
        description: 'The ID of the quotes.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      quotes_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":{"quote":"Omnis ab facilis laborum deleniti illum et illo minima optio corrupti maxime minima repellendus.","author":"Baby Farrell DVM"}}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '55'
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields:
      Returns:
        name: Returns
        description: "It get's you a random quote by an ID."
        required: false
        example: null
        type: ''
        enumValues: []
        exampleWasSpecified: false
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/quotes/search/{quotes_author}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Search Quotes with Author Names'
      description: |-
        This Route Search for a Quote from the Api using author names this will return a status code of 200 if the quote with the author name is found

        Otherwise, the request will fail with a 404 error,and not quotes is found
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      quotes_author:
        name: quotes_author
        description: ''
        required: true
        example: maiores
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      quotes_author: maiores
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"data":[]}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          x-ratelimit-limit: '60'
          x-ratelimit-remaining: '54'
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields:
      Returns:
        name: Returns
        description: 'Get you a quote from the api based on the search input.'
        required: false
        example: null
        type: ''
        enumValues: []
        exampleWasSpecified: false
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
